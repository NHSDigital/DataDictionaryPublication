<#macro drawClass class>
        "${class.id}" [
                label = "{${class.label!"Unknown class"}|
                <#list class.childDataElements as dataElement>
                + ${dataElement.label} : ${dataElement.dataType.label!"Missing datatype"} [<@multiplicity dataElement />]\l
                </#list>
                }"
        ]

</#macro>
<#macro drawChildren class>
    <#list class.childDataClasses as related>
        "${class.id}" -- "${related.id}" [
                arrowhead = "none"
                headlabel = "<@multiplicity class />"
                taillabel = "<@multiplicity related />"
        ]
    </#list>
</#macro>

<#macro multiplicity object>
    <#if object.minMultiplicity??>
<#if object.minMultiplicity == object.maxMultiplicity>${object.minMultiplicity}<#else>${object.minMultiplicity}..<#if object.maxMultiplicity==-1>*<#else>${object.maxMultiplicity!"?"}</#if></#if></#if>
</#macro>

<#macro relatedClasses dataClass>
${dataClass.label} 
<#list dataClass.childDataElements?filter(p -> p.dataType.domainType == "ReferenceType") as dataElement >
       ${dataClass.label} ${dataElement.label}  ${dataElement.dataType.label} ${dataElement.dataType.referenceClass.label}
</#list>
</macro>

graph G {
        node [
            shape = "record"
        ]
        edge [
        ]
<#list dataModel.dataClasses as dataClass>
<@drawClass dataClass />        
</#list>
<#list dataModel.dataClasses as dataClass>
<@drawChildren dataClass />        
</#list>
}